import { GetServerSideProps, NextPage } from "next";
import { useCallback, useEffect, useState, useRef } from "react";
import Head from "next/head";
import Modal from "react-modal";
import styled from "styled-components";
import Header from "@/components/Header";
import Slider from "@/components/Slider";
import SliderItem from "@/components/Slider/item";
// import { homeItems } from "@/data/home";
import { primaryColor } from "@/styles/theme";
import { device } from "@/styles/media";
import useModal from "@/hooks/useModal";
import TalkModal from "@/components/Modal/talk";
import CircleButton from "@/components/Button/circleButton";
import SliderHighlight from "@/components/Slider/highlight";
import { getTags } from "@/utils/firebase";

interface Props {
  tags: string[];
}
const Home: NextPage<Props> = ({ tags }) => {
  const center = Math.round(tags.length / 2);
  const item1 = tags.slice(0, center);
  const item2 = tags.slice(center, tags.length);
  const { isOpen, modal, toggle, setModal } = useModal({});
  const [highlight, setHighlight] = useState({
    pos: {
      x: 0,
      y: 0,
    },
    show: false,
  });
  const posRef = useRef({
    x: 0,
    y: 0,
  });

  const timeout = useRef<ReturnType<typeof setTimeout>>();

  useEffect(() => {
    setModal(<TalkModal close={toggle} />);
  }, [setModal, toggle]);

  const handleTag = useCallback((e: MouseEvent) => {
    posRef.current = {
      x: e.clientX,
      y: e.clientY,
    };

    clearTimeout(timeout.current);

    timeout.current = setTimeout(() => {
      setHighlight({
        pos: {
          x: posRef.current.x,
          y: posRef.current.y,
        },
        show: true,
      });
    }, 300);
  }, []);

  const handleHide = useCallback(() => {
    setHighlight({
      // ...highlight,
      pos: {
        x: posRef.current.x,
        y: posRef.current.y,
      },
      show: false,
    });
  }, []);

  return (
    <>
      <Head>
        <title>Ingsist</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Header />

        <Main>
          <SliderContainer>
            <Slider
              initialOffsetX={0}
              contentWidth={1920}
              mouseCallback={handleTag}
              hideCallback={handleHide}
            >
              {[...item1, ...item2].map((item, i) => (
                <SliderItem key={i} text={item} width={100} />
              ))}
            </Slider>

            <Slider
              initialOffsetX={100}
              contentWidth={1920}
              mouseCallback={handleTag}
              hideCallback={handleHide}
            >
              {[...item2, ...item1].map((item, i) => (
                <SliderItem key={i} text={item} width={100} />
              ))}
            </Slider>

            <SliderHighlight pos={highlight.pos} show={highlight.show} />
          </SliderContainer>

          <Intro>
            <h1>
              We build <br />
              the digital <br className="mobile" />
              experience,
              <br />
              and make it <br className="mobile" />
              happen.
            </h1>
            <h2>
              A Digital Product Agency
              <br />
              Based in Taipei, Taiwan.
            </h2>
          </Intro>

          <FloatContainer>
            <CircleButton text={`LET'S\nTALK`} onClick={toggle} />
          </FloatContainer>
        </Main>

        <Modal
          isOpen={isOpen}
          // onAfterOpen={afterOpenModal}
          // onRequestClose={closeModal}
          className="Modal"
          overlayClassName="Overlay"
          contentLabel="Example Modal"
        >
          {modal}
        </Modal>
      </div>
    </>
  );
};

const Main = styled.main`
  background: ${primaryColor};
  min-height: 100vh;
  padding-top: 120px;
`;

const SliderContainer = styled.section`
  display: flex;
  flex-direction: column;
  justify-content: center;
  min-height: 200px;
`;

const Intro = styled.section`
  padding: 1.5rem;
  line-height: 2.5rem;

  br {
    &.mobile {
      display: block;

      ${device.laptop} {
        display: none;
      }
    }
  }

  h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
  }

  h2 {
    line-height: 1.25rem;
  }
`;

const FloatContainer = styled.div`
  position: fixed;
  bottom: 60px;
  right: 1.5rem;
`;

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  let tags = [];
  try {
    tags = await getTags();
  } catch(err) {
    console.error(err);
  }

  return {
    props: {
      tags
    }
  }
} 

export default Home;